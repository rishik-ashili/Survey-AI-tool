SQl 

-- surveys table
CREATE TABLE surveys (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- questions table
CREATE TYPE question_type AS ENUM ('text', 'number', 'yes-no');
CREATE TABLE questions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  survey_id UUID NOT NULL REFERENCES surveys(id) ON DELETE CASCADE,
  text TEXT NOT NULL,
  type question_type NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX idx_questions_survey_id ON questions(survey_id);

-- submissions table
CREATE TABLE submissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    survey_id UUID NOT NULL REFERENCES surveys(id) ON DELETE CASCADE,
    user_name TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX idx_submissions_survey_id ON submissions(survey_id);


-- answers table
CREATE TABLE answers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    submission_id UUID NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES questions(id) ON DELETE CASCADE,
    value TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX idx_answers_submission_id ON answers(submission_id);
CREATE INDEX idx_answers_question_id ON answers(question_id);

-- Enable Row Level Security
ALTER TABLE surveys ENABLE ROW LEVEL SECURITY;
ALTER TABLE questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE submissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE answers ENABLE ROW LEVEL SECURITY;

-- Create policies for public access (or restrict as needed)
CREATE POLICY "Public surveys are viewable by everyone." ON surveys
  FOR SELECT USING (true);

CREATE POLICY "Public questions are viewable by everyone." ON questions
  FOR SELECT USING (true);

CREATE POLICY "Anyone can create submissions." ON submissions
  FOR INSERT WITH CHECK (true);

CREATE POLICY "Anyone can create answers." ON answers
  FOR INSERT WITH CHECK (true);


-- Allow anyone to insert into the surveys table
CREATE POLICY "Anyone can create surveys." ON surveys
  FOR INSERT WITH CHECK (true);

-- Allow anyone to insert into the questions table
CREATE POLICY "Anyone can create questions." ON questions
  FOR INSERT WITH CHECK (true);

-- Allow anyone to create submissions.
CREATE POLICY "Anyone can create submissions." ON submissions
  FOR INSERT WITH CHECK (true);

-- Allow anyone to create answers.
CREATE POLICY "Anyone can create answers." ON answers
  FOR INSERT WITH CHECK (true);

-- Allow users to view their own submissions.
CREATE POLICY "Users can view their own submissions." ON submissions
  FOR SELECT USING (true);









-- Add 'multiple-choice' to the question_type enum
ALTER TYPE question_type ADD VALUE 'multiple-choice';

-- Create table to store options for multiple-choice questions
CREATE TABLE question_options (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  question_id UUID NOT NULL REFERENCES questions(id) ON DELETE CASCADE,
  text TEXT NOT NULL
);
CREATE INDEX idx_question_options_question_id ON question_options(question_id);

-- Enable RLS for the new table
ALTER TABLE question_options ENABLE ROW LEVEL SECURITY;

-- Add policies for the new table
CREATE POLICY "Public question options are viewable by everyone." ON question_options
  FOR SELECT USING (true);

CREATE POLICY "Anyone can create question options." ON question_options
  FOR INSERT WITH CHECK (true);

-- Add a new table to view survey results
CREATE VIEW survey_results AS
SELECT
    s.id AS survey_id,
    s.title AS survey_title,
    sub.id AS submission_id,
    sub.user_name,
    sub.created_at AS submission_created_at,
    q.id AS question_id,
    q.text AS question_text,
    q.type AS question_type,
    a.value AS answer_value
FROM
    surveys s
JOIN
    submissions sub ON s.id = sub.survey_id
JOIN
    answers a ON sub.id = a.submission_id
JOIN
    questions q ON a.question_id = q.id;


-- Add new columns to the submissions table
ALTER TABLE submissions
ADD COLUMN latitude DOUBLE PRECISION,
ADD COLUMN longitude DOUBLE PRECISION,
ADD COLUMN city TEXT,
ADD COLUMN country TEXT,
ADD COLUMN device_type TEXT;

-- Drop the existing view to recreate it
DROP VIEW IF EXISTS survey_results;

-- Recreate the view to include the new columns
CREATE VIEW survey_results AS
SELECT
    s.id AS survey_id,
    s.title AS survey_title,
    sub.id AS submission_id,
    sub.user_name,
    sub.created_at AS submission_created_at,
    sub.latitude,
    sub.longitude,
    sub.city,
    sub.country,
    sub.device_type,
    q.id AS question_id,
    q.text AS question_text,
    q.type AS question_type,
    a.value AS answer_value
FROM
    surveys s
JOIN
    submissions sub ON s.id = sub.survey_id
JOIN
    answers a ON sub.id = a.submission_id
JOIN
    questions q ON a.question_id = q.id;


-- Allow anyone to delete surveys
CREATE POLICY "Anyone can delete surveys." ON surveys
  FOR DELETE USING (true);

-- Add a new type for multi-select multiple choice questions
ALTER TYPE question_type ADD VALUE 'multiple-choice-multi';

-- Add columns for numeric range to the questions table
ALTER TABLE questions
ADD COLUMN min_range INTEGER,
ADD COLUMN max_range INTEGER;

ALTER TABLE questions
ADD COLUMN expected_answers TEXT;

-- Drop dependent view first
DROP VIEW IF EXISTS survey_results;

-- Add columns for conditional logic and iteration
ALTER TABLE questions
ADD COLUMN parent_question_id UUID REFERENCES questions(id) ON DELETE CASCADE,
ADD COLUMN trigger_condition_value TEXT, -- e.g., 'Yes', 'No', or a specific option text
ADD COLUMN is_iterative BOOLEAN DEFAULT FALSE,
ADD COLUMN iterative_source_question_id UUID REFERENCES questions(id) ON DELETE SET NULL,
ADD COLUMN iterative_source_question_text TEXT;


-- Add indexes for performance
CREATE INDEX idx_questions_parent_question_id ON questions(parent_question_id);
CREATE INDEX idx_questions_iterative_source_question_id ON questions(iterative_source_question_id);


-- Recreate the view with the new structure
CREATE VIEW survey_results AS
SELECT
    s.id AS survey_id,
    s.title AS survey_title,
    sub.id AS submission_id,
    sub.user_name,
    sub.created_at AS submission_created_at,
    sub.latitude,
    sub.longitude,
    sub.city,
    sub.country,
    sub.device_type,
    q.id AS question_id,
    q.text AS question_text,
    q.type AS question_type,
    a.value AS answer_value,
    q.parent_question_id,
    q.is_iterative,
    q.iterative_source_question_id,
    q.iterative_source_question_text
FROM
    surveys s
JOIN
    submissions sub ON s.id = sub.survey_id
JOIN
    answers a ON sub.id = a.submission_id
JOIN
    questions q ON a.question_id = q.id;
