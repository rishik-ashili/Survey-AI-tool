
"use client";

import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Loader2, Sparkles, Upload } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

const formSchema = z.object({
  prompt: z.string().min(10, {
    message: "Prompt must be at least 10 characters.",
  }),
  userInstructions: z.string().optional(),
  exampleInputs: z.string().optional(),
  questionBank: z.any().optional(),
});

type SurveyGeneratorFormProps = {
  onGenerateSurvey: (data: {
    prompt: string;
    userInstructions: string;
    exampleInputs: string;
    questionBankContent: string;
  }) => void;
  isLoading: boolean;
  children?: React.ReactNode;
};

const censusInstructions = `
Generate questions with a formal tone suitable for a government census. The questions should be detailed and specific. Use a mix of multiple choice (single and multi-select), yes/no, numeric, and text questions. Here are some examples of the style required:

- How many persons are in the household, who are normally living together for six months or more or are expected to stay for six months or more and taking food from a common kitchen? (Numeric)
- What is the primary source of energy of the household for cooking? (Multiple Choice, Single Select with options like 'firewood and chips-01', 'LPG-02', 'dung cake-04')
- Did the household perform any ceremony during the last 30 days? (Yes/No)
- What is the Religion of the head of the household? (Multiple Choice with options like 'Hinduism-1', 'Islam-2')
- Whether the major income from self-employment was from agricultural sector or non-agricultural sector? (Multiple Choice, Single Select with options like 'self-employment in agriculture -1', 'self-employment in non-agriculture-2')
`;

const statisticalInstructions = `
Generate questions in the style of a detailed statistical survey, focusing on quantifiable data, often in monetary terms or specific coded choices. Questions should be precise and include clear instructions or exclusions for the respondent. Use a mix of numeric, multiple choice (single-select with codes), and text questions. Here are examples of the style required:

- What is the imputed value of usual consumption in a month from home grown stock like, rice, cereals, pulses, vegetables, milk, firewood, chips, cow dung, etc. (B): make entry in whole number of rupees. [If home grown stocks are used on regular basis, the imputed value of such usual consumption in a month at ex-farm/ex-factory price will be recorded] (Numeric)
- primary source of energy for cooking during last 30 days preceding the date of survey [codes: firewood and chips-01, LPG-02, other natural gas -03, dung cake-04, kerosene-05, coke orcoal-06, gobar gas-07, other biogas -08, charcoal-10, electricity(incl. generated by solar or wind power generators) -11, no cooking arrangement-12, others-19] (Multiple Choice, Single Select)
- type of washing of clothes considering major source during last 30 days preceding the date of survey [codes: mechanical by household members -1, manual by household members-2, by outsourcing-3] (Multiple Choice, Single Select)
- What is the expenditure on purchase of items like clothing, footwear, etc. during last 365 days (D): make entry in whole number of rupees. (Numeric)
`;


const toneButtons = [
    { label: "Professional", value: "Keep the tone professional and corporate." },
    { label: "Government", value: "Use formal language suitable for government surveys." },
    { label: "Creative", value: "Use a creative and engaging tone." },
    { label: "Casual", value: "Use a casual and friendly tone." },
    { label: "Census", value: censusInstructions },
    { label: "Statistical Survey", value: statisticalInstructions },
]

export default function SurveyGeneratorForm({
  onGenerateSurvey,
  isLoading,
  children
}: SurveyGeneratorFormProps) {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
      userInstructions: "",
      exampleInputs: "",
    },
  });

  const questionBankRef = form.register("questionBank");

  async function onSubmit(values: z.infer<typeof formSchema>) {
    let questionBankContent = "";
    if (values.questionBank && values.questionBank.length > 0) {
      const file = values.questionBank[0];
      if (file.type === "text/csv" || file.type === "text/plain") {
        questionBankContent = await file.text();
      } else {
        form.setError("questionBank", {
          type: "manual",
          message: "Please upload a valid .csv or .txt file.",
        });
        return;
      }
    }

    onGenerateSurvey({ ...values, questionBankContent });
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="prompt"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Survey Prompt</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="e.g., A customer satisfaction survey for a new SaaS product"
                  className="min-h-[100px]"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                Describe the survey you want to create.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="userInstructions"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Additional Instructions (Optional)</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="e.g., Focus on ease of use and pricing."
                  className="min-h-[150px]"
                  {...field}
                />
              </FormControl>
              <div className="flex flex-wrap gap-2 mt-2">
                {toneButtons.map(tone => (
                    <Button key={tone.label} type="button" variant="outline" size="sm" onClick={() => form.setValue('userInstructions', tone.value)}>
                        {tone.label}
                    </Button>
                ))}
              </div>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="exampleInputs"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Example Questions (Optional)</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="e.g., 'How would you rate the user interface?'"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="questionBank"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Question Bank (Optional)</FormLabel>
              <FormControl>
                <div className="relative">
                  <Upload className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    type="file"
                    accept=".csv, .txt"
                    className="pl-9"
                    {...questionBankRef}
                  />
                </div>
              </FormControl>
              <FormDescription>
                Upload a .csv or .txt file with one question per line.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        {children}

        <Button type="submit" disabled={isLoading} className="w-full" size="lg">
          {isLoading ? (
            <>
              <Loader2 className="animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Sparkles />
              Generate Survey
            </>
          )}
        </Button>
      </form>
    </Form>
  );
}
